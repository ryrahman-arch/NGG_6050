import math
import numpy as np
from scipy import stats

# Method 1 z-score
# Given values
mean = 10
std_dev = 2
sample_sizes = [5, 10, 20, 40, 80, 160, 1000]

# Z-score for 95% confidence level
z_score = 1.96

# Iterate over each sample size and compute the confidence interval
for n in sample_sizes:
    # Compute the Standard Error of the Mean (SEM)
    sem = std_dev / math.sqrt(n)
    
    # Compute the margin of error
    margin_of_error = z_score * sem
    
    # Compute the confidence interval
    confidence_interval = (mean - margin_of_error, mean + margin_of_error)
    
    print(f"Sample Size: {n}")
    print(f"Method 1 zscore 95% Confidence Interval: {confidence_interval}\n")


# Method 2 t-distribution
# Given values
mean = 10
std_dev = 2
sample_sizes = [5, 10, 20, 40, 80, 160, 1000]

# Iterate over each sample size and compute the confidence interval
for n in sample_sizes:
    # Degrees of freedom
    df = n - 1
    
    # Compute the Standard Error of the Mean (SEM)
    sem = std_dev / math.sqrt(n)
    
    # Get the critical t-value for 95% confidence level
    t_score = stats.t.ppf(0.975, df)  # 0.975 because it's a two-tailed test
    
    # Compute the margin of error
    margin_of_error = t_score * sem
    
    # Compute the confidence interval
    confidence_interval = (mean - margin_of_error, mean + margin_of_error)
    
    print(f"Sample Size: {n}")
    print(f"Method 2 tdistribution 95% Confidence Interval: {confidence_interval}\n")

# Method 3 bootstrapping
# Parameters
mean = 10
std_dev = 2
sample_sizes = [5, 10, 20, 40, 80, 160, 1000]
n_bootstrap = 1000  # Number of bootstrap samples

# Function to calculate the bootstrap confidence interval
def bootstrap_ci(data, n_bootstrap=1000, alpha=0.05):
    bootstrap_means = []
    n = len(data)
    
    for _ in range(n_bootstrap):
        sample = np.random.choice(data, size=n, replace=True)
        bootstrap_means.append(np.mean(sample))
    
    lower_bound = np.percentile(bootstrap_means, 100 * (alpha / 2))
    upper_bound = np.percentile(bootstrap_means, 100 * (1 - alpha / 2))
    
    return lower_bound, upper_bound

# Iterate over each sample size and compute the confidence interval
for n in sample_sizes:
    # Generate original data assuming normal distribution
    original_data = np.random.normal(loc=mean, scale=std_dev, size=n)
    
    # Compute the bootstrap confidence interval
    ci_lower, ci_upper = bootstrap_ci(original_data, n_bootstrap)
    
    print(f"Sample Size: {n}")
    print(f"Method 3 bootstrapped 95% Confidence Interval (Bootstrap): ({ci_lower:.2f}, {ci_upper:.2f})\n")

# Method 4 credible intervals
# Parameters
mean = 10
std_dev = 2
sample_sizes = [5, 10, 20, 40, 80, 160, 1000]

# Define the prior parameters for Normal-Inverse-Gamma
# For simplicity, we'll use a non-informative prior
alpha = 1.0  # Shape parameter for the inverse-gamma prior (variance)
beta = 1.0   # Scale parameter for the inverse-gamma prior (variance)
mu_0 = 0     # Prior mean
kappa_0 = 1  # Prior scaling factor

def bayesian_credible_interval(data, alpha=1.0, beta=1.0, mu_0=0, kappa_0=1, cred_level=0.95):
    n = len(data)
    sample_mean = np.mean(data)
    sample_var = np.var(data, ddof=1)
    
    # Posterior parameters
    kappa_n = kappa_0 + n
    mu_n = (kappa_0 * mu_0 + n * sample_mean) / kappa_n
    lambda_n = beta + 0.5 * (n * sample_var + (kappa_0 * n) / (kappa_0 + n))
    nu_n = n + alpha

    # Posterior distribution of the mean
    posterior_var = lambda_n / (kappa_n * (nu_n - 2))  # Variance of the mean

    # Compute the credible interval using the t-distribution
    t_score = stats.t.ppf((1 + cred_level) / 2, df=nu_n - 1)
    margin_of_error = t_score * np.sqrt(posterior_var)

    return mu_n - margin_of_error, mu_n + margin_of_error

# Iterate over each sample size and compute the credible interval
for n in sample_sizes:
    # Generate original data assuming normal distribution
    original_data = np.random.normal(loc=mean, scale=std_dev, size=n)
    
    # Compute the Bayesian credible interval
    ci_lower, ci_upper = bayesian_credible_interval(original_data)
    
    print(f"Sample Size: {n}")
    print(f"95% Bayesian Credible Interval: ({ci_lower:.2f}, {ci_upper:.2f})\n")


